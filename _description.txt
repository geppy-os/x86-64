
; Distributed under GPL v1 License  ( www.gnu.org/licenses/old-licenses/gpl-1.0.html )
; All Rights Reserved.




;===================================================================================================
; thread structure (equals to process in Geppy):
;===================================================================================================
; each thread occupies max 512GB space
; stack goes at the end of 512GB
; so it turns out that each thread gets its own entry in pml4 (with entirely private PDP)
; and we can have max 256 (128TB / 512GB) threads per CPU - but we'll make it per system
; max 256 threads per all running CPUs :(
; a thread ID is a 512GB chunk index used by thread
; one thread is meant to be separate program/application
; any logic within the thread (aka user_thread) is to be done by means of asynchronyous processing
; we'll see how it turns out
;--------------------------------------------------------------------------------------------------
;registers:
;   +0kb   4kb registers

;timer_regs:
;   +4kb   4kb registers

;user_data_rw:
;   +8kb   4kb pointers to dynamically allocated ram, thread state, interrupt info, messages
;
;   +12kb  ? 4kb Separate PML4 table
;
;  +16kb   ? 4kb PDP - responsible for 512GB, no more than 1 PDP per thread so we keep it here
;
;  +20kb   ? empty, not allocated, kill thread if accessed
;
;  +32kb   stack to be used by kernel in ring0 while doing job on behalf of the thread (grows down)
;
;  +32KB   empty ? (grows up)
;
;  +64KB   code starts for all threads except kernel system thread (grows up)
;
;--------------------------------------------------------------------------------------------------
; KBD buffer needs to be per visible window (a rectangle) -
;     1byte symbols since kbd has limited number of keys
;     we'll use key modifiers (separate bytes) which may also indicate different keyboards
;     multi byte sequences from KBD are converted into kernel key codes, after which they are
;     converted into utf8 on user side using a library

;--------------------------------------------------------------------------------------------------
; First we create system thread using rules not described here.
;   then
; To create a thread we switch to system thread (when scheduler allows), alloc thread id, and from
; now on we run all code (timeslice) on behalf of thread to be created. Sys thread occupies one
; predefined entry in PML4. When we create new thread - we use correct linear addr right away.
; There is no remapping after thread was created and before its internal initialization functions
; is about to run.
;
; System thread has all threads mapped at the same time since they all occupy different lin addr.
;
;===================================================================================================
; Timers / Events
;===================================================================================================
; Timer event can interrupt any event of any currently running thread except for another timer.
; Timers are mainy for device drivers to do IO opeartions in a timely fashion.

; Originally timers could interrupt any thread at exact precise moment timer was set at - dev drivers
; need this. Time it takes to execute an IRQ with CLI is considered small. However, now interrupts
; can exit(ints reenabled) to run "heavy" code right away - which can last indefinately in theory.
;
; Why does user thread need a fast timer ? It doesn't ! Min granularity is 1 second, to be adjusted.
;
; It needs screen refresh, 16 times a seconds = each 62.5   ms
;			   20			     50     ms
;			   25			     40     ms
;			   32			     31.25  ms
;			   40			     25     ms
;			   50			     20     ms
;			   66			     15.625 ms
; with screen refresh, game logic will be updated as user sees results on screen and not at mad speeds
; Movies/animations may need fast timers.
; As with everything else - its the events that trigger.
;
; To exchange bitmap frames(movies)
;      user XORs 4byte variable at the end of 4KB
;      kernel XORs 4byte var at the beginning of next 4KB
;      when user sees that 2 vars are equals (8byte cmpxchg) - it supplies next frame and xor the 4b var
;
; Timer handler can exit with a request to resume(corresponging "sleep" func returns) sleeping thread
;	or it can request to leave everything as it is.

; we need to return number lapicT ticks to the caller so that it can schedule next timer
; so that resonable periodic timer can be achieved

