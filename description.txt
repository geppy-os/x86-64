
; Distributed under GPL v1 License  ( www.gnu.org/licenses/old-licenses/gpl-1.0.html )
; All Rights Reserved.


;===================================================================================================
; thread structure (equals to process in Geppy):
;===================================================================================================
; each thread occupies max 512GB space
; stack goes at the end of 512GB
; so it turns out that each thread gets its own entry in pml4 (with entirely private PDP)
; and we can have max 256 (128TB / 512GB) threads per CPU - but we'll make it per system
; max 256 threads per all running CPUs :(
; a thread id easily identifies which 512GB chunk in use by thread
; one thread is meant to be separate program
; later, number of threads can be extended by using second portion of 256TB address space
; any logic within the thread (aka user_thread) is to be done by means of asynchronyous processing
; we'll see how it turns out
;--------------------------------------------------------------------------------------------------
; + 0KB
;	4kb registers
;
;	4kb pointers to dynamically allocated ram, thread state, interrupt info, messages
;
;	4kb Separate PML4 table
;
;	4kb PDP - responsible for 512GB, no more than 1 PDP per thread so we keep it here
;
; +16	empty, not allocated, kill thread if accessed
;
; +32	kernel stack to be used by kernel while doing job on behalf of the thread
;
; +64KB code starts for all threads except kernel system thread
;
;--------------------------------------------------------------------------------------------------
; KBD buffer needs to be per visible window (a rectangle) -
;     1byte symbols since kbd has limited number of keys
;     we'll use key modifiers (separate bytes) which may also indicate different keyboards
;     multi byte sequences from KBD are converted into kernel key codes, after which they are
;     converted into utf8 on user side using a library

;--------------------------------------------------------------------------------------------------
; First we create system thread using rules not described here.
;   then
; To create a thread we switch to system thread (when scheduler allows), alloc thread id, and from
; now on we run all code (timeslice) on behalf of thread to be created. Sys thread occupies one
; predefined entry in PML4. When we create new thread - we use correct linear addr right away.
; There is not remapping after thread was created and before its internal initialization functions
; is about to run.
; Threads are expected to have position independed code.

; We don't delete PML4 entries beloning to other threads from  system thread pml4.
; Simple cr3 reload gives sys thread access to all changes that user thread did (same PDP at all times)
; All user threads are always mapped into sys process.
; If sys thread does smth on behalf of user thread without switching to user thread pml4
;					       then simple cr3 reload provides user thread all changes
; However, before we do anything on behalf of a thread we try to change to its PML4 (CR3 reload)
; And we check if shared system PML4 entries need to be updated


; we could have separate 512GB for libraries where code shared among CPUs and data is per thread per CPU
; we could start libraries from lower addrs(even lowest 512GB meant for ring0 only)
;									 and threads from top addrs


;===================================================================================================
; Timers
;===================================================================================================
; Why does user thread need a fast timer ? It doesn't ! Min granularity is 1 second, to be adjusted.

; It needs screen refresh, 16 times a seconds = each 62.5   ms
;			   20			     50     ms
;			   25			     40     ms
;			   32			     31.25  ms
;			   40			     25     ms
;			   50			     20     ms
;			   66			     15.625 ms

; with screen refresh, (game) logic will be updated as user sees results on screen and not at mad speeds
; As with everything else - its the events that trigger.







